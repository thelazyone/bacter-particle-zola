#projects {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 100%;
  max-width: 1280px;
  margin: 0 auto;
  @media only screen and (min-width: $cut) {
    width: 80%;
  }
}

.projects-grid {
  display: grid;
  // grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  grid-template-columns: repeat(3, 1fr);

  gap: 20px; /* space between columns and rows */
}

.user-projects {
  margin: 20px auto;
  img {
    max-width: 100%;
    height: auto;
    border-radius: 5px;
  }
  h5 {
    margin: 0;
  }
  li {
    color: $main;
    font-size: 1.1rem;
  }
  p {
    margin-right: 5px;
  }
}

.contents {
  @media only screen and (min-width: $cut) {
    margin-left: 0;
    width: 48%;
  }
}

.contents-right {
  @media only screen and (min-width: $cut) {
    float: right;
    margin-top: -5%;
    width: 48%;
  }
}
.images-right {
  @media only screen and (min-width: $cut) {
    float: right;
    width: 48%;
  }
  img {
    @media only screen and (min-width: $cut) {
      float: right;
    }
  }
}

.images-left {
  @media only screen and (min-width: $cut) {
    float: left;
    width: 48%;
  }
  img {
    @media only screen and (min-width: $cut) {
      float: left;
    }
  }
}

.images-center {
  overflow: hidden; /* hides the sides of the image that overflow the container */

  img {
    width: auto; /* allows the image to maintain its natural width */
    max-width: none; /* overrides any max-width that might be set elsewhere */
    display: block; /* centers the image horizontally */
    margin: 0 auto;
  }

  @media only screen and (min-width: $cut) {
    width: 96%; /* changes the container width at larger screen sizes */
  }
}

.contents-center {
  @media only screen and (min-width: $cut) {
    margin-top: -5%;
    width: 96%;
  }
}

.project-link {
  display: inline-block;
  margin: 10px 0px;
  padding: 5px;
  color: $main;
  background-color: transparent;
  border: 1px solid $main;
  border-radius: 10px;
  text-align: center;
  outline: none;
  text-decoration: none;
  cursor: pointer;
  transition: color 0.3s ease-out,
              background-color 0.3s ease-out,
              border-color 0.3s ease-out;
  &:hover {
    background-color: $purple;
    border-color: $purple;
    color: #fff;
    transition: color 0.3s ease-in,
                background-color 0.3s ease-in,
                border-color 0.3s ease-in;
  }
  &:active {
    background-color: $purple;
    border-color: $purple;
    color: #fff;
    transition: color 0.3s ease-in,
                background-color 0.3s ease-in,
                border-color 0.3s ease-in;
  }
}